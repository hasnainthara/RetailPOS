{"ast":null,"code":"var _jsxFileName = \"D:\\\\restaurantPOS\\\\src\\\\contexts\\\\OrderContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { useAuth } from './AuthContext';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  currentOrder: null,\n  loading: false,\n  error: null\n};\nfunction orderReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE_ORDER':\n      {\n        const {\n          tableId,\n          table\n        } = action.payload;\n        const newOrder = {\n          id: uuidv4(),\n          tableId,\n          table,\n          waiterId: '',\n          // Will be set from auth context\n          waiter: {},\n          // Will be set from auth context\n          items: [],\n          status: 'draft',\n          subtotal: 0,\n          tax: 0,\n          total: 0,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        return {\n          ...state,\n          currentOrder: newOrder,\n          error: null\n        };\n      }\n    case 'ADD_ITEM':\n      {\n        if (!state.currentOrder) return state;\n        const {\n          menuItem,\n          quantity,\n          specialInstructions\n        } = action.payload;\n\n        // Check if item already exists in order\n        const existingItemIndex = state.currentOrder.items.findIndex(item => item.menuItemId === menuItem.id && item.specialInstructions === specialInstructions);\n        let updatedItems;\n        if (existingItemIndex >= 0) {\n          // Update existing item quantity\n          updatedItems = state.currentOrder.items.map((item, index) => {\n            if (index === existingItemIndex) {\n              const newQuantity = item.quantity + quantity;\n              return {\n                ...item,\n                quantity: newQuantity,\n                totalPrice: newQuantity * item.unitPrice\n              };\n            }\n            return item;\n          });\n        } else {\n          // Add new item\n          const newOrderItem = {\n            id: uuidv4(),\n            menuItemId: menuItem.id,\n            menuItem,\n            quantity,\n            unitPrice: menuItem.price,\n            totalPrice: quantity * menuItem.price,\n            specialInstructions,\n            status: 'pending'\n          };\n          updatedItems = [...state.currentOrder.items, newOrderItem];\n        }\n        const subtotal = updatedItems.reduce((sum, item) => sum + item.totalPrice, 0);\n        const tax = subtotal * 0.1; // 10% tax\n        const total = subtotal + tax;\n        return {\n          ...state,\n          currentOrder: {\n            ...state.currentOrder,\n            items: updatedItems,\n            subtotal,\n            tax,\n            total,\n            updatedAt: new Date()\n          }\n        };\n      }\n    case 'REMOVE_ITEM':\n      {\n        if (!state.currentOrder) return state;\n        const updatedItems = state.currentOrder.items.filter(item => item.id !== action.payload);\n        const subtotal = updatedItems.reduce((sum, item) => sum + item.totalPrice, 0);\n        const tax = subtotal * 0.1;\n        const total = subtotal + tax;\n        return {\n          ...state,\n          currentOrder: {\n            ...state.currentOrder,\n            items: updatedItems,\n            subtotal,\n            tax,\n            total,\n            updatedAt: new Date()\n          }\n        };\n      }\n    case 'UPDATE_QUANTITY':\n      {\n        if (!state.currentOrder) return state;\n        const {\n          orderItemId,\n          quantity\n        } = action.payload;\n        if (quantity <= 0) {\n          // Remove item if quantity is 0 or negative\n          return orderReducer(state, {\n            type: 'REMOVE_ITEM',\n            payload: orderItemId\n          });\n        }\n        const updatedItems = state.currentOrder.items.map(item => {\n          if (item.id === orderItemId) {\n            return {\n              ...item,\n              quantity,\n              totalPrice: quantity * item.unitPrice\n            };\n          }\n          return item;\n        });\n        const subtotal = updatedItems.reduce((sum, item) => sum + item.totalPrice, 0);\n        const tax = subtotal * 0.1;\n        const total = subtotal + tax;\n        return {\n          ...state,\n          currentOrder: {\n            ...state.currentOrder,\n            items: updatedItems,\n            subtotal,\n            tax,\n            total,\n            updatedAt: new Date()\n          }\n        };\n      }\n    case 'UPDATE_INSTRUCTIONS':\n      {\n        if (!state.currentOrder) return state;\n        const {\n          orderItemId,\n          instructions\n        } = action.payload;\n        const updatedItems = state.currentOrder.items.map(item => {\n          if (item.id === orderItemId) {\n            return {\n              ...item,\n              specialInstructions: instructions\n            };\n          }\n          return item;\n        });\n        return {\n          ...state,\n          currentOrder: {\n            ...state.currentOrder,\n            items: updatedItems,\n            updatedAt: new Date()\n          }\n        };\n      }\n    case 'SUBMIT_ORDER_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'SUBMIT_ORDER_SUCCESS':\n      return {\n        ...state,\n        currentOrder: null,\n        loading: false,\n        error: null\n      };\n    case 'SUBMIT_ORDER_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case 'CANCEL_ORDER':\n      return {\n        ...state,\n        currentOrder: null,\n        error: null\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n}\nconst OrderContext = /*#__PURE__*/createContext(undefined);\nexport function OrderProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(orderReducer, initialState);\n  const {\n    user\n  } = useAuth();\n  const createOrder = tableId => {\n    // Mock table data - in real app, this would come from a tables context or API\n    const mockTable = {\n      id: tableId,\n      number: parseInt(tableId),\n      capacity: 4,\n      status: 'occupied'\n    };\n    dispatch({\n      type: 'CREATE_ORDER',\n      payload: {\n        tableId,\n        table: mockTable\n      }\n    });\n  };\n  const addItemToOrder = (menuItem, quantity, specialInstructions) => {\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        menuItem,\n        quantity,\n        specialInstructions\n      }\n    });\n  };\n  const removeItemFromOrder = orderItemId => {\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: orderItemId\n    });\n  };\n  const updateItemQuantity = (orderItemId, quantity) => {\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        orderItemId,\n        quantity\n      }\n    });\n  };\n  const submitOrder = async () => {\n    if (!state.currentOrder || !user) {\n      throw new Error('No current order or user');\n    }\n    dispatch({\n      type: 'SUBMIT_ORDER_START'\n    });\n    try {\n      // Update order with waiter info\n      const orderToSubmit = {\n        ...state.currentOrder,\n        waiterId: user.id,\n        waiter: user,\n        status: 'submitted',\n        updatedAt: new Date()\n      };\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Store order locally (in real app, this would be sent to backend)\n      const existingOrders = JSON.parse(localStorage.getItem('pos_orders') || '[]');\n      existingOrders.push(orderToSubmit);\n      localStorage.setItem('pos_orders', JSON.stringify(existingOrders));\n\n      // Check if offline and store for sync\n      if (!navigator.onLine) {\n        const offlineOrders = JSON.parse(localStorage.getItem('offline_orders') || '[]');\n        offlineOrders.push({\n          id: uuidv4(),\n          order: orderToSubmit,\n          timestamp: new Date(),\n          synced: false\n        });\n        localStorage.setItem('offline_orders', JSON.stringify(offlineOrders));\n      }\n      dispatch({\n        type: 'SUBMIT_ORDER_SUCCESS'\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SUBMIT_ORDER_FAILURE',\n        payload: error instanceof Error ? error.message : 'Failed to submit order'\n      });\n      throw error;\n    }\n  };\n  const cancelOrder = () => {\n    dispatch({\n      type: 'CANCEL_ORDER'\n    });\n  };\n  const calculateTotal = () => {\n    var _state$currentOrder;\n    return ((_state$currentOrder = state.currentOrder) === null || _state$currentOrder === void 0 ? void 0 : _state$currentOrder.total) || 0;\n  };\n  const value = {\n    currentOrder: state.currentOrder,\n    createOrder,\n    addItemToOrder,\n    removeItemFromOrder,\n    updateItemQuantity,\n    submitOrder,\n    cancelOrder,\n    calculateTotal\n  };\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n}\n_s(OrderProvider, \"UbE+bRyfFCD9l1K5wDm8aGzkdAE=\", false, function () {\n  return [useAuth];\n});\n_c = OrderProvider;\nexport function useOrder() {\n  _s2();\n  const context = useContext(OrderContext);\n  if (context === undefined) {\n    throw new Error('useOrder must be used within an OrderProvider');\n  }\n  return context;\n}\n_s2(useOrder, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { OrderContext };\nvar _c;\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useAuth","v4","uuidv4","jsxDEV","_jsxDEV","initialState","currentOrder","loading","error","orderReducer","state","action","type","tableId","table","payload","newOrder","id","waiterId","waiter","items","status","subtotal","tax","total","createdAt","Date","updatedAt","menuItem","quantity","specialInstructions","existingItemIndex","findIndex","item","menuItemId","updatedItems","map","index","newQuantity","totalPrice","unitPrice","newOrderItem","price","reduce","sum","filter","orderItemId","instructions","OrderContext","undefined","OrderProvider","children","_s","dispatch","user","createOrder","mockTable","number","parseInt","capacity","addItemToOrder","removeItemFromOrder","updateItemQuantity","submitOrder","Error","orderToSubmit","Promise","resolve","setTimeout","existingOrders","JSON","parse","localStorage","getItem","push","setItem","stringify","navigator","onLine","offlineOrders","order","timestamp","synced","message","cancelOrder","calculateTotal","_state$currentOrder","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useOrder","_s2","context","$RefreshReg$"],"sources":["D:/restaurantPOS/src/contexts/OrderContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode } from 'react';\nimport { Order, OrderItem, MenuItem, Table, OrderContextType } from '../types';\nimport { useAuth } from './AuthContext';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface OrderState {\n  currentOrder: Order | null;\n  loading: boolean;\n  error: string | null;\n}\n\ntype OrderAction =\n  | { type: 'CREATE_ORDER'; payload: { tableId: string; table: Table } }\n  | { type: 'ADD_ITEM'; payload: { menuItem: MenuItem; quantity: number; specialInstructions?: string } }\n  | { type: 'REMOVE_ITEM'; payload: string }\n  | { type: 'UPDATE_QUANTITY'; payload: { orderItemId: string; quantity: number } }\n  | { type: 'UPDATE_INSTRUCTIONS'; payload: { orderItemId: string; instructions: string } }\n  | { type: 'SUBMIT_ORDER_START' }\n  | { type: 'SUBMIT_ORDER_SUCCESS' }\n  | { type: 'SUBMIT_ORDER_FAILURE'; payload: string }\n  | { type: 'CANCEL_ORDER' }\n  | { type: 'CLEAR_ERROR' };\n\nconst initialState: OrderState = {\n  currentOrder: null,\n  loading: false,\n  error: null,\n};\n\nfunction orderReducer(state: OrderState, action: OrderAction): OrderState {\n  switch (action.type) {\n    case 'CREATE_ORDER': {\n      const { tableId, table } = action.payload;\n      const newOrder: Order = {\n        id: uuidv4(),\n        tableId,\n        table,\n        waiterId: '', // Will be set from auth context\n        waiter: {} as any, // Will be set from auth context\n        items: [],\n        status: 'draft',\n        subtotal: 0,\n        tax: 0,\n        total: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      return {\n        ...state,\n        currentOrder: newOrder,\n        error: null,\n      };\n    }\n    \n    case 'ADD_ITEM': {\n      if (!state.currentOrder) return state;\n      \n      const { menuItem, quantity, specialInstructions } = action.payload;\n      \n      // Check if item already exists in order\n      const existingItemIndex = state.currentOrder.items.findIndex(\n        item => item.menuItemId === menuItem.id && item.specialInstructions === specialInstructions\n      );\n      \n      let updatedItems: OrderItem[];\n      \n      if (existingItemIndex >= 0) {\n        // Update existing item quantity\n        updatedItems = state.currentOrder.items.map((item, index) => {\n          if (index === existingItemIndex) {\n            const newQuantity = item.quantity + quantity;\n            return {\n              ...item,\n              quantity: newQuantity,\n              totalPrice: newQuantity * item.unitPrice,\n            };\n          }\n          return item;\n        });\n      } else {\n        // Add new item\n        const newOrderItem: OrderItem = {\n          id: uuidv4(),\n          menuItemId: menuItem.id,\n          menuItem,\n          quantity,\n          unitPrice: menuItem.price,\n          totalPrice: quantity * menuItem.price,\n          specialInstructions,\n          status: 'pending',\n        };\n        updatedItems = [...state.currentOrder.items, newOrderItem];\n      }\n      \n      const subtotal = updatedItems.reduce((sum, item) => sum + item.totalPrice, 0);\n      const tax = subtotal * 0.1; // 10% tax\n      const total = subtotal + tax;\n      \n      return {\n        ...state,\n        currentOrder: {\n          ...state.currentOrder,\n          items: updatedItems,\n          subtotal,\n          tax,\n          total,\n          updatedAt: new Date(),\n        },\n      };\n    }\n    \n    case 'REMOVE_ITEM': {\n      if (!state.currentOrder) return state;\n      \n      const updatedItems = state.currentOrder.items.filter(\n        item => item.id !== action.payload\n      );\n      \n      const subtotal = updatedItems.reduce((sum, item) => sum + item.totalPrice, 0);\n      const tax = subtotal * 0.1;\n      const total = subtotal + tax;\n      \n      return {\n        ...state,\n        currentOrder: {\n          ...state.currentOrder,\n          items: updatedItems,\n          subtotal,\n          tax,\n          total,\n          updatedAt: new Date(),\n        },\n      };\n    }\n    \n    case 'UPDATE_QUANTITY': {\n      if (!state.currentOrder) return state;\n      \n      const { orderItemId, quantity } = action.payload;\n      \n      if (quantity <= 0) {\n        // Remove item if quantity is 0 or negative\n        return orderReducer(state, { type: 'REMOVE_ITEM', payload: orderItemId });\n      }\n      \n      const updatedItems = state.currentOrder.items.map(item => {\n        if (item.id === orderItemId) {\n          return {\n            ...item,\n            quantity,\n            totalPrice: quantity * item.unitPrice,\n          };\n        }\n        return item;\n      });\n      \n      const subtotal = updatedItems.reduce((sum, item) => sum + item.totalPrice, 0);\n      const tax = subtotal * 0.1;\n      const total = subtotal + tax;\n      \n      return {\n        ...state,\n        currentOrder: {\n          ...state.currentOrder,\n          items: updatedItems,\n          subtotal,\n          tax,\n          total,\n          updatedAt: new Date(),\n        },\n      };\n    }\n    \n    case 'UPDATE_INSTRUCTIONS': {\n      if (!state.currentOrder) return state;\n      \n      const { orderItemId, instructions } = action.payload;\n      \n      const updatedItems = state.currentOrder.items.map(item => {\n        if (item.id === orderItemId) {\n          return {\n            ...item,\n            specialInstructions: instructions,\n          };\n        }\n        return item;\n      });\n      \n      return {\n        ...state,\n        currentOrder: {\n          ...state.currentOrder,\n          items: updatedItems,\n          updatedAt: new Date(),\n        },\n      };\n    }\n    \n    case 'SUBMIT_ORDER_START':\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    \n    case 'SUBMIT_ORDER_SUCCESS':\n      return {\n        ...state,\n        currentOrder: null,\n        loading: false,\n        error: null,\n      };\n    \n    case 'SUBMIT_ORDER_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    \n    case 'CANCEL_ORDER':\n      return {\n        ...state,\n        currentOrder: null,\n        error: null,\n      };\n    \n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null,\n      };\n    \n    default:\n      return state;\n  }\n}\n\nconst OrderContext = createContext<OrderContextType | undefined>(undefined);\n\nexport function OrderProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(orderReducer, initialState);\n  const { user } = useAuth();\n\n  const createOrder = (tableId: string): void => {\n    // Mock table data - in real app, this would come from a tables context or API\n    const mockTable: Table = {\n      id: tableId,\n      number: parseInt(tableId),\n      capacity: 4,\n      status: 'occupied',\n    };\n    \n    dispatch({ type: 'CREATE_ORDER', payload: { tableId, table: mockTable } });\n  };\n\n  const addItemToOrder = (\n    menuItem: MenuItem, \n    quantity: number, \n    specialInstructions?: string\n  ): void => {\n    dispatch({ \n      type: 'ADD_ITEM', \n      payload: { menuItem, quantity, specialInstructions } \n    });\n  };\n\n  const removeItemFromOrder = (orderItemId: string): void => {\n    dispatch({ type: 'REMOVE_ITEM', payload: orderItemId });\n  };\n\n  const updateItemQuantity = (orderItemId: string, quantity: number): void => {\n    dispatch({ type: 'UPDATE_QUANTITY', payload: { orderItemId, quantity } });\n  };\n\n  const submitOrder = async (): Promise<void> => {\n    if (!state.currentOrder || !user) {\n      throw new Error('No current order or user');\n    }\n\n    dispatch({ type: 'SUBMIT_ORDER_START' });\n\n    try {\n      // Update order with waiter info\n      const orderToSubmit = {\n        ...state.currentOrder,\n        waiterId: user.id,\n        waiter: user,\n        status: 'submitted' as const,\n        updatedAt: new Date(),\n      };\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Store order locally (in real app, this would be sent to backend)\n      const existingOrders = JSON.parse(localStorage.getItem('pos_orders') || '[]');\n      existingOrders.push(orderToSubmit);\n      localStorage.setItem('pos_orders', JSON.stringify(existingOrders));\n\n      // Check if offline and store for sync\n      if (!navigator.onLine) {\n        const offlineOrders = JSON.parse(localStorage.getItem('offline_orders') || '[]');\n        offlineOrders.push({\n          id: uuidv4(),\n          order: orderToSubmit,\n          timestamp: new Date(),\n          synced: false,\n        });\n        localStorage.setItem('offline_orders', JSON.stringify(offlineOrders));\n      }\n\n      dispatch({ type: 'SUBMIT_ORDER_SUCCESS' });\n    } catch (error) {\n      dispatch({ \n        type: 'SUBMIT_ORDER_FAILURE', \n        payload: error instanceof Error ? error.message : 'Failed to submit order' \n      });\n      throw error;\n    }\n  };\n\n  const cancelOrder = (): void => {\n    dispatch({ type: 'CANCEL_ORDER' });\n  };\n\n  const calculateTotal = (): number => {\n    return state.currentOrder?.total || 0;\n  };\n\n  const value: OrderContextType = {\n    currentOrder: state.currentOrder,\n    createOrder,\n    addItemToOrder,\n    removeItemFromOrder,\n    updateItemQuantity,\n    submitOrder,\n    cancelOrder,\n    calculateTotal,\n  };\n\n  return (\n    <OrderContext.Provider value={value}>\n      {children}\n    </OrderContext.Provider>\n  );\n}\n\nexport function useOrder(): OrderContextType {\n  const context = useContext(OrderContext);\n  if (context === undefined) {\n    throw new Error('useOrder must be used within an OrderProvider');\n  }\n  return context;\n}\n\nexport { OrderContext };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}