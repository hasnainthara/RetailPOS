{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,isAuthenticated:false,loading:false,error:null};function authReducer(state,action){switch(action.type){case'LOGIN_START':return{...state,loading:true,error:null};case'LOGIN_SUCCESS':return{...state,user:action.payload,isAuthenticated:true,loading:false,error:null};case'LOGIN_FAILURE':return{...state,user:null,isAuthenticated:false,loading:false,error:action.payload};case'LOGOUT':return{...state,user:null,isAuthenticated:false,loading:false,error:null};case'CLEAR_ERROR':return{...state,error:null};default:return state;}}const AuthContext=/*#__PURE__*/createContext(undefined);// Mock users for demo purposes\nconst mockUsers=[{id:'1',name:'Admin User',email:'admin@restaurant.com',role:'admin',isActive:true,createdAt:new Date()},{id:'2',name:'John Cashier',email:'cashier@electronicsshop.com',role:'cashier',isActive:true,createdAt:new Date()}];export function AuthProvider(_ref){let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);useEffect(()=>{// Check for stored user session\nconst storedUser=localStorage.getItem('pos_user');if(storedUser){try{const user=JSON.parse(storedUser);dispatch({type:'LOGIN_SUCCESS',payload:user});}catch(error){localStorage.removeItem('pos_user');}}},[]);const login=async(email,password)=>{dispatch({type:'LOGIN_START'});try{// Simulate API call delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Mock authentication - in real app, this would be an API call\nconst user=mockUsers.find(u=>u.email===email);if(!user){throw new Error('Invalid email or password');}// Mock password validation (in real app, this would be handled by backend)\nconst validPasswords={'admin@restaurant.com':'admin123','waiter@restaurant.com':'waiter123'};if(validPasswords[email]!==password){throw new Error('Invalid email or password');}// Store user session\nlocalStorage.setItem('pos_user',JSON.stringify(user));dispatch({type:'LOGIN_SUCCESS',payload:user});}catch(error){dispatch({type:'LOGIN_FAILURE',payload:error instanceof Error?error.message:'Login failed'});throw error;}};const logout=()=>{localStorage.removeItem('pos_user');dispatch({type:'LOGOUT'});};const value={user:state.user,isAuthenticated:state.isAuthenticated,loading:state.loading,login,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});}export function useAuth(){const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;}export{AuthContext};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsx","_jsx","initialState","user","isAuthenticated","loading","error","authReducer","state","action","type","payload","AuthContext","undefined","mockUsers","id","name","email","role","isActive","createdAt","Date","AuthProvider","_ref","children","dispatch","storedUser","localStorage","getItem","JSON","parse","removeItem","login","password","Promise","resolve","setTimeout","find","u","Error","validPasswords","setItem","stringify","message","logout","value","Provider","useAuth","context"],"sources":["D:/restaurantPOS/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport { User, AuthContextType } from '../types';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  loading: boolean;\n  error: string | null;\n}\n\ntype AuthAction =\n  | { type: 'LOGIN_START' }\n  | { type: 'LOGIN_SUCCESS'; payload: User }\n  | { type: 'LOGIN_FAILURE'; payload: string }\n  | { type: 'LOGOUT' }\n  | { type: 'CLEAR_ERROR' };\n\nconst initialState: AuthState = {\n  user: null,\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n};\n\nfunction authReducer(state: AuthState, action: AuthAction): AuthState {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: true,\n        loading: false,\n        error: null,\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: action.payload,\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null,\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null,\n      };\n    default:\n      return state;\n  }\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Mock users for demo purposes\nconst mockUsers: User[] = [\n  {\n    id: '1',\n    name: 'Admin User',\n    email: 'admin@restaurant.com',\n    role: 'admin',\n    isActive: true,\n    createdAt: new Date(),\n  },\n  {\n    id: '2',\n    name: 'John Cashier',\n    email: 'cashier@electronicsshop.com',\n    role: 'cashier',\n    isActive: true,\n    createdAt: new Date(),\n  },\n];\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  useEffect(() => {\n    // Check for stored user session\n    const storedUser = localStorage.getItem('pos_user');\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        dispatch({ type: 'LOGIN_SUCCESS', payload: user });\n      } catch (error) {\n        localStorage.removeItem('pos_user');\n      }\n    }\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    dispatch({ type: 'LOGIN_START' });\n\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock authentication - in real app, this would be an API call\n      const user = mockUsers.find(u => u.email === email);\n      \n      if (!user) {\n        throw new Error('Invalid email or password');\n      }\n\n      // Mock password validation (in real app, this would be handled by backend)\n      const validPasswords: { [key: string]: string } = {\n        'admin@restaurant.com': 'admin123',\n        'waiter@restaurant.com': 'waiter123',\n      };\n\n      if (validPasswords[email] !== password) {\n        throw new Error('Invalid email or password');\n      }\n\n      // Store user session\n      localStorage.setItem('pos_user', JSON.stringify(user));\n      dispatch({ type: 'LOGIN_SUCCESS', payload: user });\n    } catch (error) {\n      dispatch({ \n        type: 'LOGIN_FAILURE', \n        payload: error instanceof Error ? error.message : 'Login failed' \n      });\n      throw error;\n    }\n  };\n\n  const logout = (): void => {\n    localStorage.removeItem('pos_user');\n    dispatch({ type: 'LOGOUT' });\n  };\n\n  const value: AuthContextType = {\n    user: state.user,\n    isAuthenticated: state.isAuthenticated,\n    loading: state.loading,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport { AuthContext };"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,UAAU,CAAEC,SAAS,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAiB3F,KAAM,CAAAC,YAAuB,CAAG,CAC9BC,IAAI,CAAE,IAAI,CACVC,eAAe,CAAE,KAAK,CACtBC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAED,QAAS,CAAAC,WAAWA,CAACC,KAAgB,CAAEC,MAAkB,CAAa,CACpE,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,aAAa,CAChB,MAAO,CACL,GAAGF,KAAK,CACRH,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IACT,CAAC,CACH,IAAK,eAAe,CAClB,MAAO,CACL,GAAGE,KAAK,CACRL,IAAI,CAAEM,MAAM,CAACE,OAAO,CACpBP,eAAe,CAAE,IAAI,CACrBC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CACH,IAAK,eAAe,CAClB,MAAO,CACL,GAAGE,KAAK,CACRL,IAAI,CAAE,IAAI,CACVC,eAAe,CAAE,KAAK,CACtBC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAEG,MAAM,CAACE,OAChB,CAAC,CACH,IAAK,QAAQ,CACX,MAAO,CACL,GAAGH,KAAK,CACRL,IAAI,CAAE,IAAI,CACVC,eAAe,CAAE,KAAK,CACtBC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CACH,IAAK,aAAa,CAChB,MAAO,CACL,GAAGE,KAAK,CACRF,KAAK,CAAE,IACT,CAAC,CACH,QACE,MAAO,CAAAE,KAAK,CAChB,CACF,CAEA,KAAM,CAAAI,WAAW,cAAGhB,aAAa,CAA8BiB,SAAS,CAAC,CAEzE;AACA,KAAM,CAAAC,SAAiB,CAAG,CACxB,CACEC,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,YAAY,CAClBC,KAAK,CAAE,sBAAsB,CAC7BC,IAAI,CAAE,OAAO,CACbC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACD,CACEN,EAAE,CAAE,GAAG,CACPC,IAAI,CAAE,cAAc,CACpBC,KAAK,CAAE,6BAA6B,CACpCC,IAAI,CAAE,SAAS,CACfC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACF,CAED,MAAO,SAAS,CAAAC,YAAYA,CAAAC,IAAA,CAAwC,IAAvC,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAChE,KAAM,CAACf,KAAK,CAAEiB,QAAQ,CAAC,CAAG3B,UAAU,CAACS,WAAW,CAAEL,YAAY,CAAC,CAE/DH,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAA2B,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CACnD,GAAIF,UAAU,CAAE,CACd,GAAI,CACF,KAAM,CAAAvB,IAAI,CAAG0B,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CACnCD,QAAQ,CAAC,CAAEf,IAAI,CAAE,eAAe,CAAEC,OAAO,CAAER,IAAK,CAAC,CAAC,CACpD,CAAE,MAAOG,KAAK,CAAE,CACdqB,YAAY,CAACI,UAAU,CAAC,UAAU,CAAC,CACrC,CACF,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,KAAK,CAAG,KAAAA,CAAOf,KAAa,CAAEgB,QAAgB,GAAoB,CACtER,QAAQ,CAAC,CAAEf,IAAI,CAAE,aAAc,CAAC,CAAC,CAEjC,GAAI,CACF;AACA,KAAM,IAAI,CAAAwB,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,KAAM,CAAAhC,IAAI,CAAGW,SAAS,CAACuB,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACrB,KAAK,GAAKA,KAAK,CAAC,CAEnD,GAAI,CAACd,IAAI,CAAE,CACT,KAAM,IAAI,CAAAoC,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CAEA;AACA,KAAM,CAAAC,cAAyC,CAAG,CAChD,sBAAsB,CAAE,UAAU,CAClC,uBAAuB,CAAE,WAC3B,CAAC,CAED,GAAIA,cAAc,CAACvB,KAAK,CAAC,GAAKgB,QAAQ,CAAE,CACtC,KAAM,IAAI,CAAAM,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CAEA;AACAZ,YAAY,CAACc,OAAO,CAAC,UAAU,CAAEZ,IAAI,CAACa,SAAS,CAACvC,IAAI,CAAC,CAAC,CACtDsB,QAAQ,CAAC,CAAEf,IAAI,CAAE,eAAe,CAAEC,OAAO,CAAER,IAAK,CAAC,CAAC,CACpD,CAAE,MAAOG,KAAK,CAAE,CACdmB,QAAQ,CAAC,CACPf,IAAI,CAAE,eAAe,CACrBC,OAAO,CAAEL,KAAK,WAAY,CAAAiC,KAAK,CAAGjC,KAAK,CAACqC,OAAO,CAAG,cACpD,CAAC,CAAC,CACF,KAAM,CAAArC,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAsC,MAAM,CAAGA,CAAA,GAAY,CACzBjB,YAAY,CAACI,UAAU,CAAC,UAAU,CAAC,CACnCN,QAAQ,CAAC,CAAEf,IAAI,CAAE,QAAS,CAAC,CAAC,CAC9B,CAAC,CAED,KAAM,CAAAmC,KAAsB,CAAG,CAC7B1C,IAAI,CAAEK,KAAK,CAACL,IAAI,CAChBC,eAAe,CAAEI,KAAK,CAACJ,eAAe,CACtCC,OAAO,CAAEG,KAAK,CAACH,OAAO,CACtB2B,KAAK,CACLY,MACF,CAAC,CAED,mBACE3C,IAAA,CAACW,WAAW,CAACkC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAArB,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAEA,MAAO,SAAS,CAAAuB,OAAOA,CAAA,CAAoB,CACzC,KAAM,CAAAC,OAAO,CAAGnD,UAAU,CAACe,WAAW,CAAC,CACvC,GAAIoC,OAAO,GAAKnC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAA0B,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAS,OAAO,CAChB,CAEA,OAASpC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}